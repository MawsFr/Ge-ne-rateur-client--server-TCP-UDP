/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package view;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.FileWriter;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.ClasseClientUDP;
import model.ClasseServeurUDP;
import model.Model;

/**
 *
 * @author Maws
 */
public class FenetrePrincipal extends javax.swing.JFrame implements Observer {
    
    private Model model;
    /**
     * Creates new form FenetrePrincipal
     */
    public FenetrePrincipal(Model model) {
        this.model = model;
        this.model.ajouterObserver(this);
        
        initComponents();
        
        panelCode.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tcpGroupeInfoClavierBoucleOuPas = new javax.swing.ButtonGroup();
        enregistreurFichier = new javax.swing.JFileChooser();
        tcpGroupeTypeInfoArgOuClavier = new javax.swing.ButtonGroup();
        udpGroupeTypeInfoArgOuClavier = new javax.swing.ButtonGroup();
        udpGroupeInfoClavierBoucleOuPas = new javax.swing.ButtonGroup();
        udpGroupeTypeInfo = new javax.swing.ButtonGroup();
        groupeNbInfoClientUDP = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        tabsTCPUDP = new javax.swing.JTabbedPane();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabsClientServeurTCP = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox20 = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jPanel27 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jCheckBox21 = new javax.swing.JCheckBox();
        jPanel18 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        jCheckBox11 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField8 = new javax.swing.JTextField();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jPanel22 = new javax.swing.JPanel();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabsClientServeurUDP = new javax.swing.JTabbedPane();
        jPanel20 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtNomServeurUDP = new javax.swing.JTextField();
        chkPossedeMainServeurUDP = new javax.swing.JCheckBox();
        jPanel25 = new javax.swing.JPanel();
        chkSpecifierPortServeurUDP = new javax.swing.JCheckBox();
        txtPortServeurUDP = new javax.swing.JTextField();
        chkPortEnArgServeurUDP = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        txtTailleBufferServeurUDP = new javax.swing.JTextField();
        jPanel26 = new javax.swing.JPanel();
        chkTourneEnBoucleServeurUDP = new javax.swing.JCheckBox();
        jPanel29 = new javax.swing.JPanel();
        chkSysoutServeurUDP = new javax.swing.JCheckBox();
        chkVerifServeurUDP = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtNomClientUDP = new javax.swing.JTextField();
        chkPossedeMainClientUDP = new javax.swing.JCheckBox();
        jPanel33 = new javax.swing.JPanel();
        txtPortClientUDP = new javax.swing.JTextField();
        chkIpEtPortEnArgClientUDP = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtIpClientUDP = new javax.swing.JTextField();
        txtTailleBuferClientUDP = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel34 = new javax.swing.JPanel();
        chkPaquetNonVideClientUDP = new javax.swing.JCheckBox();
        chkAfficherReponseClientUDP = new javax.swing.JCheckBox();
        radioInfoSeulClientUDP = new javax.swing.JRadioButton();
        radioBoucleClientUDP = new javax.swing.JRadioButton();
        txtMotsFinBoucleClientUDP = new javax.swing.JTextField();
        radioInfoClavierClientUDP = new javax.swing.JRadioButton();
        radioInfoEnArgClientUDP = new javax.swing.JRadioButton();
        chkPaquetVideClientUDP = new javax.swing.JCheckBox();
        jPanel35 = new javax.swing.JPanel();
        chkSysoutClientUDP = new javax.swing.JCheckBox();
        chkVerifClientUDP = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editeurCode = new javax.swing.JEditorPane();
        jPanel14 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        btnCopier = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        panelCode = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        txtCode = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();

        enregistreurFichier.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        enregistreurFichier.setFileFilter(new FileNameExtensionFilter("Fichiers .java", "java"));
        enregistreurFichier.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TCP and UDP generator by M.");
        setMinimumSize(new java.awt.Dimension(300, 300));

        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(400, 400));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1000, 700));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));

        tabsTCPUDP.setPreferredSize(new java.awt.Dimension(300, 300));
        tabsTCPUDP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsTCPUDPStateChanged(evt);
            }
        });

        tabsClientServeurTCP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsClientServeurTCPStateChanged(evt);
            }
        });

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Fichier :"));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Nom de la classe du Serveur TCP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel9.add(jLabel2, gridBagConstraints);

        jTextField1.setText("ServeurTCP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel9.add(jTextField1, gridBagConstraints);

        jCheckBox20.setSelected(true);
        jCheckBox20.setText("Possède un main()");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel9.add(jCheckBox20, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        jPanel10.add(jPanel9, gridBagConstraints);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Constructeur :"));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jCheckBox1.setText("Spécifier un port : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel11.add(jCheckBox1, gridBagConstraints);

        jTextField2.setText("9876");
        jTextField2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel11.add(jTextField2, gridBagConstraints);

        jCheckBox2.setText("Le port doit être spécifié en argument (à travers String args[]) ");
        jCheckBox2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel11.add(jCheckBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel10.add(jPanel11, gridBagConstraints);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Type de serveur :"));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jCheckBox3.setText("Le serveur doit tourner en boucle (donc pas de close() à la fin)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel12.add(jCheckBox3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel10.add(jPanel12, gridBagConstraints);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Attente de connexion :"));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jCheckBox4.setText("Connexions multiples (gestion par Threads)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel13.add(jCheckBox4, gridBagConstraints);

        jCheckBox5.setText("Compter le nombre de connexions simultanées");
        jCheckBox5.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel13.add(jCheckBox5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel10.add(jPanel13, gridBagConstraints);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestion des Flux (InputStream et OutputStream)"));
        jPanel15.setLayout(new java.awt.GridBagLayout());

        jCheckBox8.setText("Créer la variable in (BufferedReader) qui va lire le InputStream du socket ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel15.add(jCheckBox8, gridBagConstraints);

        jCheckBox9.setText("Créer la variable out (PrintWriter) qui va écrire dans le OutputStream du socket ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel15.add(jCheckBox9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel10.add(jPanel15, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Options de debuggage"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jCheckBox6.setText("Mettre des sysout pour voir l'avancement du programme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jCheckBox6, gridBagConstraints);

        jCheckBox7.setText("Faire les vérification sur la nullité des variables par exemple");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jCheckBox7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel10.add(jPanel6, gridBagConstraints);

        jPanel27.setBorder(javax.swing.BorderFactory.createTitledBorder("Traitements :"));
        jPanel27.setLayout(new java.awt.GridBagLayout());

        jLabel14.setForeground(new java.awt.Color(255, 0, 51));
        jLabel14.setText("Ne pas oublier de taper le code du traitement après avoir généré le code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel27.add(jLabel14, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel10.add(jPanel27, gridBagConstraints);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabsClientServeurTCP.addTab("Serveur TCP", jPanel7);

        jPanel16.setLayout(new java.awt.GridBagLayout());

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Fichier :"));
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Nom de la classe du Client TCP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel17.add(jLabel4, gridBagConstraints);

        jTextField4.setText("ClientTCP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel17.add(jTextField4, gridBagConstraints);

        jCheckBox21.setSelected(true);
        jCheckBox21.setText("Possède un main");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel17.add(jCheckBox21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        jPanel16.add(jPanel17, gridBagConstraints);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Constructeur :"));
        jPanel18.setLayout(new java.awt.GridBagLayout());

        jTextField5.setText("9876");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel18.add(jTextField5, gridBagConstraints);

        jCheckBox11.setText("L'IP et le port sont transmises par arguments (via String args[])");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel18.add(jCheckBox11, gridBagConstraints);

        jLabel6.setText("Port du serveur distant:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel18.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Adresse IP du Serveur distant :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel18.add(jLabel7, gridBagConstraints);

        jTextField7.setText("InetAddress.getLocalHost()");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel18.add(jTextField7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel16.add(jPanel18, gridBagConstraints);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestion des Flux (InputStream et OutputStream)"));
        jPanel21.setLayout(new java.awt.GridBagLayout());

        jCheckBox15.setSelected(true);
        jCheckBox15.setText("Le client va envoyer des info au serveur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel21.add(jCheckBox15, gridBagConstraints);

        jCheckBox10.setSelected(true);
        jCheckBox10.setText("Le client va lire les infos ou la réponse du serveur et l'afficher(Recommandé)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel21.add(jCheckBox10, gridBagConstraints);

        tcpGroupeInfoClavierBoucleOuPas.add(jRadioButton1);
        jRadioButton1.setText("On envoie qu'une seule info (donc pas besoin de boucle)");
        jRadioButton1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel21.add(jRadioButton1, gridBagConstraints);

        tcpGroupeInfoClavierBoucleOuPas.add(jRadioButton2);
        jRadioButton2.setText("On envoie plusieurs info donc besoin d'une boucle qui s'arrête lorsque l'on tape :");
        jRadioButton2.setToolTipText("Séparer les mot par un espace");
        jRadioButton2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel21.add(jRadioButton2, gridBagConstraints);

        jTextField8.setText("fin bye aurevoir");
        jTextField8.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jTextField8, gridBagConstraints);

        tcpGroupeTypeInfoArgOuClavier.add(jRadioButton5);
        jRadioButton5.setText("Ces informations envoyées vont être tapées au clavier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel21.add(jRadioButton5, gridBagConstraints);

        tcpGroupeTypeInfoArgOuClavier.add(jRadioButton6);
        jRadioButton6.setText("Ces infos vont êtres passée en arguments (via String args[])");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel21.add(jRadioButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel16.add(jPanel21, gridBagConstraints);

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Options de debuggage"));
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jCheckBox17.setText("Mettre des sysout pour voir l'avancement du programme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel22.add(jCheckBox17, gridBagConstraints);

        jCheckBox18.setText("Faire les vérification sur la nullité des variables par exemple");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel22.add(jCheckBox18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel16.add(jPanel22, gridBagConstraints);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabsClientServeurTCP.addTab("Client TCP", jPanel2);

        jScrollPane3.setViewportView(tabsClientServeurTCP);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );

        tabsTCPUDP.addTab("TCP", jPanel19);

        tabsClientServeurUDP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsClientServeurUDPStateChanged(evt);
            }
        });

        jPanel23.setLayout(new java.awt.GridBagLayout());

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Fichier :"));
        jPanel24.setLayout(new java.awt.GridBagLayout());

        jLabel8.setText("Nom de la classe du Serveur UDP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel24.add(jLabel8, gridBagConstraints);

        txtNomServeurUDP.setText("ServeurUDP");
        txtNomServeurUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomServeurUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel24.add(txtNomServeurUDP, gridBagConstraints);

        chkPossedeMainServeurUDP.setSelected(true);
        chkPossedeMainServeurUDP.setText("Possède un main");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel24.add(chkPossedeMainServeurUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        jPanel23.add(jPanel24, gridBagConstraints);

        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder("Constructeur :"));
        jPanel25.setLayout(new java.awt.GridBagLayout());

        chkSpecifierPortServeurUDP.setText("Spécifier un port : ");
        chkSpecifierPortServeurUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSpecifierPortServeurUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel25.add(chkSpecifierPortServeurUDP, gridBagConstraints);

        txtPortServeurUDP.setText("9876");
        txtPortServeurUDP.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel25.add(txtPortServeurUDP, gridBagConstraints);

        chkPortEnArgServeurUDP.setText("Le port doit être spécifié en argument (à travers String args[]) ");
        chkPortEnArgServeurUDP.setEnabled(false);
        chkPortEnArgServeurUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPortEnArgServeurUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel25.add(chkPortEnArgServeurUDP, gridBagConstraints);

        jLabel15.setText("Taille Buffer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel25.add(jLabel15, gridBagConstraints);

        txtTailleBufferServeurUDP.setText("1024");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel25.add(txtTailleBufferServeurUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel23.add(jPanel25, gridBagConstraints);

        jPanel26.setBorder(javax.swing.BorderFactory.createTitledBorder("Type de serveur :"));
        jPanel26.setLayout(new java.awt.GridBagLayout());

        chkTourneEnBoucleServeurUDP.setText("Le serveur doit tourner en boucle (donc pas de close() à la fin)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel26.add(chkTourneEnBoucleServeurUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel23.add(jPanel26, gridBagConstraints);

        jPanel29.setBorder(javax.swing.BorderFactory.createTitledBorder("Options de debuggage"));
        jPanel29.setLayout(new java.awt.GridBagLayout());

        chkSysoutServeurUDP.setText("Mettre des sysout pour voir l'avancement du programme");
        chkSysoutServeurUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSysoutServeurUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel29.add(chkSysoutServeurUDP, gridBagConstraints);

        chkVerifServeurUDP.setText("Faire les vérification sur la nullité des variables par exemple");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel29.add(chkVerifServeurUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel23.add(jPanel29, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Traitements :"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Ne pas oublier de taper le code du traitement après avoir généré le code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel5.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel23.add(jPanel5, gridBagConstraints);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabsClientServeurUDP.addTab("Serveur UDP", jPanel20);

        jPanel31.setLayout(new java.awt.GridBagLayout());

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder("Fichier :"));
        jPanel32.setLayout(new java.awt.GridBagLayout());

        jLabel10.setText("Nom de la classe du Client UDP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel32.add(jLabel10, gridBagConstraints);

        txtNomClientUDP.setText("ClientUDP");
        txtNomClientUDP.setToolTipText("nom de la classe (et du constructeur)");
        txtNomClientUDP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNomClientUDPKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel32.add(txtNomClientUDP, gridBagConstraints);

        chkPossedeMainClientUDP.setSelected(true);
        chkPossedeMainClientUDP.setText("Possède un main");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel32.add(chkPossedeMainClientUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        jPanel31.add(jPanel32, gridBagConstraints);

        jPanel33.setBorder(javax.swing.BorderFactory.createTitledBorder("Constructeur :"));
        jPanel33.setLayout(new java.awt.GridBagLayout());

        txtPortClientUDP.setText("9876");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(txtPortClientUDP, gridBagConstraints);

        chkIpEtPortEnArgClientUDP.setText("L'IP et le port sont transmises par arguments (via String args[])");
        chkIpEtPortEnArgClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIpEtPortEnArgClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(chkIpEtPortEnArgClientUDP, gridBagConstraints);

        jLabel12.setText("Port du serveur distant:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Adresse IP du Serveur distant :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(jLabel13, gridBagConstraints);

        txtIpClientUDP.setText("localhost");
        txtIpClientUDP.setToolTipText("Sans guillemets : par exemple localhost ou 192.168.0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(txtIpClientUDP, gridBagConstraints);

        txtTailleBuferClientUDP.setText("1024");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(txtTailleBuferClientUDP, gridBagConstraints);

        jLabel16.setText("Taille Buffer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel33.add(jLabel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel31.add(jPanel33, gridBagConstraints);

        jPanel34.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestion des données à envoyer"));
        jPanel34.setLayout(new java.awt.GridBagLayout());

        udpGroupeTypeInfo.add(chkPaquetNonVideClientUDP);
        chkPaquetNonVideClientUDP.setText("Le client va envoyer une ou des info au serveur");
        chkPaquetNonVideClientUDP.setToolTipText("La on veux envoyer des information au serveur pour qu'ils puisse les traiter");
        chkPaquetNonVideClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPaquetNonVideClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel34.add(chkPaquetNonVideClientUDP, gridBagConstraints);

        chkAfficherReponseClientUDP.setSelected(true);
        chkAfficherReponseClientUDP.setText("Le client va lire les infos ou la réponse du serveur et l'afficher");
        chkAfficherReponseClientUDP.setToolTipText("On vex savoir si l'on veux afficher la réponse du serveur. logiquement oui d'ailleurs je ne sais pas pourquoi j'ai mis cette option ici ...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel34.add(chkAfficherReponseClientUDP, gridBagConstraints);

        groupeNbInfoClientUDP.add(radioInfoSeulClientUDP);
        radioInfoSeulClientUDP.setSelected(true);
        radioInfoSeulClientUDP.setText("On ne lit et n'envoie qu'une seule info (PAS BESOIN DE BOUCLE)");
        radioInfoSeulClientUDP.setToolTipText("On ne lit qu'une info puis le client s'éteint");
        radioInfoSeulClientUDP.setEnabled(false);
        radioInfoSeulClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioInfoSeulClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel34.add(radioInfoSeulClientUDP, gridBagConstraints);

        groupeNbInfoClientUDP.add(radioBoucleClientUDP);
        radioBoucleClientUDP.setText("On envoie plusieurs info donc besoin d'une boucle qui s'arrête lorsque l'on tape :");
        radioBoucleClientUDP.setToolTipText("On peut ici envoyer plusieurs info a a manière d'un chat. Les mot de fin de conversation sont spécifié en dessous");
        radioBoucleClientUDP.setEnabled(false);
        radioBoucleClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBoucleClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel34.add(radioBoucleClientUDP, gridBagConstraints);

        txtMotsFinBoucleClientUDP.setText("fin bye aurevoir");
        txtMotsFinBoucleClientUDP.setToolTipText("Séparer les mot par un espace");
        txtMotsFinBoucleClientUDP.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel34.add(txtMotsFinBoucleClientUDP, gridBagConstraints);

        udpGroupeTypeInfoArgOuClavier.add(radioInfoClavierClientUDP);
        radioInfoClavierClientUDP.setText("Une ou plusieurs informations envoyées vont être tapées au CLAVIER");
        radioInfoClavierClientUDP.setToolTipText("Les infos peux etre mutliple. On les tape au clavier et on les envoies");
        radioInfoClavierClientUDP.setEnabled(false);
        radioInfoClavierClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioInfoClavierClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel34.add(radioInfoClavierClientUDP, gridBagConstraints);

        udpGroupeTypeInfoArgOuClavier.add(radioInfoEnArgClientUDP);
        radioInfoEnArgClientUDP.setSelected(true);
        radioInfoEnArgClientUDP.setText("Une seul info passée en ARGUMENT (via String args[]) et envoyé qu'une fois sans boucle");
        radioInfoEnArgClientUDP.setToolTipText("Cette info sera passé en argument au programme par exemple 4:Bonjour");
        radioInfoEnArgClientUDP.setEnabled(false);
        radioInfoEnArgClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioInfoEnArgClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel34.add(radioInfoEnArgClientUDP, gridBagConstraints);

        udpGroupeTypeInfo.add(chkPaquetVideClientUDP);
        chkPaquetVideClientUDP.setSelected(true);
        chkPaquetVideClientUDP.setText("Le client va juste envoyer un paquet vide pour demander l'info au serveur");
        chkPaquetVideClientUDP.setToolTipText("Lorsque l'on ne veux pas spécialement envoyer de données au serveur. On veux juste dire au serveur, envoie moi ton informations");
        chkPaquetVideClientUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPaquetVideClientUDPActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel34.add(chkPaquetVideClientUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel31.add(jPanel34, gridBagConstraints);

        jPanel35.setBorder(javax.swing.BorderFactory.createTitledBorder("Options de debuggage"));
        jPanel35.setLayout(new java.awt.GridBagLayout());

        chkSysoutClientUDP.setText("Mettre des sysout pour voir l'avancement du programme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel35.add(chkSysoutClientUDP, gridBagConstraints);

        chkVerifClientUDP.setText("Faire les vérification sur la nullité des variables par exemple");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel35.add(chkVerifClientUDP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel31.add(jPanel35, gridBagConstraints);

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabsClientServeurUDP.addTab("Client UDP", jPanel30);

        jScrollPane2.setViewportView(tabsClientServeurUDP);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );

        tabsTCPUDP.addTab("UDP", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsTCPUDP, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsTCPUDP, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel8.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel8.setPreferredSize(new java.awt.Dimension(600, 600));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(editeurCode);

        jPanel8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.X_AXIS));

        jButton4.setBackground(new java.awt.Color(255, 0, 102));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Générer Code");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel14.add(jButton4);

        btnCopier.setText("Copier");
        btnCopier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopierActionPerformed(evt);
            }
        });
        jPanel14.add(btnCopier);

        jButton2.setText("Sauvegarder dans un fichier");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel14.add(jButton2);

        jButton3.setText("Effacer tout");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel14.add(jButton3);

        jPanel8.add(jPanel14, java.awt.BorderLayout.PAGE_END);

        panelCode.setBorder(javax.swing.BorderFactory.createTitledBorder("Code de remplissage"));
        panelCode.setMinimumSize(new java.awt.Dimension(200, 56));
        panelCode.setName(""); // NOI18N

        jButton7.setText("X");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        panelCode.add(jButton7);

        jButton6.setText("Générer le code");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        panelCode.add(jButton6);

        txtCode.setMinimumSize(new java.awt.Dimension(100, 30));
        txtCode.setPreferredSize(new java.awt.Dimension(100, 30));
        panelCode.add(txtCode);

        jButton5.setText("Remplir");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        panelCode.add(jButton5);

        jPanel8.add(panelCode, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setRightComponent(jPanel8);

        jMenu1.setText("Fichier");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Entrer un code de remplissage");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator1);
        jMenu1.add(jSeparator2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Quitter");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int reponse = enregistreurFichier.showSaveDialog(this);
        
        if(reponse == JFileChooser.APPROVE_OPTION) {
            try {
                String s = enregistreurFichier.getSelectedFile().toString();
                FileWriter fw = null;
                if(s.contains(".java")) {
                    fw = new FileWriter(s);
                } else {
                     fw = new FileWriter(enregistreurFichier.getSelectedFile() + ".java");
                }
                if(fw != null) {
                    fw.write(editeurCode.getText());
                    fw.close();
                }
                
            } catch(Exception e) {
                System.out.println("Impossible de sauvegarder ...");
                
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void txtNomServeurUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomServeurUDPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomServeurUDPActionPerformed
    
    private void txtNomClientUDPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomClientUDPKeyPressed
        
        
    }//GEN-LAST:event_txtNomClientUDPKeyPressed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        if(model.isClientTCP()) {
            
            editeurCode.setText("Le générateur de client TCP n'est pas encore implémenté :(");
        }
        
        if(model.isClientUDP()) {
            setModelClientUDP();
            model.getClientUDP().generer();
        }
        
        if(model.isServerTCP()) {
            editeurCode.setText("Le générateur de serveur TCP n'est pas encore implémenté :(");
        }
        
        if(model.isServerUDP()) {
            setModelServeurUDP();
            model.getServeurUDP().generer();
            
        }
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void setModel() {
       setModelClientUDP();
       setModelServeurUDP();
       //setModelServeurTCP;
       //setModelCientTCP;
    }
    
    private void setModelServeurUDP() {
        ClasseServeurUDP c = model.getServeurUDP();
        c.setNom(txtNomServeurUDP.getText());
        if(chkPossedeMainServeurUDP.isSelected()) {
            c.setPossedeMain(true);
        } else {
            c.setPossedeMain(false);
        }
        if(chkSpecifierPortServeurUDP.isSelected()) {
            c.setPortASpecifier(true);
            if(!chkPortEnArgServeurUDP.isSelected()) {
                c.setPortASpecifier(true);
                c.setPortEnArgument(false);
                
                c.setPort(txtPortServeurUDP.getText());
                
                
            } else{
                c.setPortEnArgument(true);
            }
        }else {
            c.setPortASpecifier(false);
        }
        
        
        c.setTaille(txtTailleBufferServeurUDP.getText());
        
        
        if(chkTourneEnBoucleServeurUDP.isSelected()) {
            c.setTourneEnBoucle(true);
        } else {
            c.setTourneEnBoucle(false);
        }
        
        if(chkSysoutServeurUDP.isSelected()) {
            c.setSysoutAvancement(true);
        } else {
            c.setSysoutAvancement(false);
        }
        
        if(chkVerifServeurUDP.isSelected()) {
            c.setVerificationNull(true);
            
        }else {
            c.setVerificationNull(false);
        }
        
        
    }
    
    private void setModelClientUDP() {
        ClasseClientUDP c = model.getClientUDP();
        c.setNom(txtNomClientUDP.getText());
        if(chkPossedeMainClientUDP.isSelected()) {
            c.setPossedeMain(true);
        } else {
            c.setPossedeMain(false);
        }
        
        if(!chkIpEtPortEnArgClientUDP.isSelected()) {
            c.setPortASpecifier(true);
            c.setPortEnArgument(false);
            if(txtIpClientUDP.getText().equals("localhost")) {
                c.setIp("InetAddress.getLocalHost()");
            } else {
                    c.setIp("InetAddress.getByName(\""+ txtIpClientUDP.getText()+ "\")");
                
            }
            
            c.setPort(txtPortClientUDP.getText());
            
            
        } else{
            c.setPortEnArgument(true);
        }
        
        c.setTaille(txtTailleBuferClientUDP.getText());
        
        if(chkPaquetVideClientUDP.isSelected()) {
            c.setEnvoyerDesDonnees(false);
            c.setDonneesATaperAuClavier(false);
            c.setTourneEnBoucle(false);
            
        }else if(chkPaquetNonVideClientUDP.isSelected()) {
            c.setEnvoyerDesDonnees(true);
            if(radioInfoClavierClientUDP.isSelected()) {
                c.setDonneesATaperAuClavier(true);
                if(radioInfoSeulClientUDP.isSelected()) {
                    c.setTourneEnBoucle(false);
                } else if(radioBoucleClientUDP.isSelected()) {
                    c.setTourneEnBoucle(true);
                    c.setMotsDeFinDEnvoiEnBoucle(txtMotsFinBoucleClientUDP.getText());
                }
            } else if(radioInfoEnArgClientUDP.isSelected()) {
                c.setTourneEnBoucle(false);
                c.setDonneesATaperAuClavier(false);
                
                
            }
            
        }
        
        if(chkAfficherReponseClientUDP.isSelected()) {
            c.setAfficherReponse(true);
        } else {
            c.setAfficherReponse(false);
        }
        
        if(chkSysoutClientUDP.isSelected()) {
            c.setSysoutAvancement(true);
        } else {
            c.setSysoutAvancement(false);
        }
        
        if(chkVerifClientUDP.isSelected()) {
            c.setVerificationNull(true);
            
        }else {
            c.setVerificationNull(false);
        }
    }
    
    private void tabsTCPUDPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsTCPUDPStateChanged
        // TODO add your handling code here:
        tabsChanged();
        
    }//GEN-LAST:event_tabsTCPUDPStateChanged
    
    private void tabsClientServeurUDPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsClientServeurUDPStateChanged
        // TODO add your handling code here:
        tabsChanged();
    }//GEN-LAST:event_tabsClientServeurUDPStateChanged
    
    private void tabsClientServeurTCPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsClientServeurTCPStateChanged
        // TODO add your handling code here:
        tabsChanged();
    }//GEN-LAST:event_tabsClientServeurTCPStateChanged
    
    private void chkSpecifierPortServeurUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSpecifierPortServeurUDPActionPerformed
        // TODO add your handling code here:
        if(chkSpecifierPortServeurUDP.isSelected()) {
            
            if(chkPortEnArgServeurUDP.isSelected()) {
                txtPortServeurUDP.setEnabled(false);
            }else {
                txtPortServeurUDP.setEnabled(true);
            }
            chkPortEnArgServeurUDP.setEnabled(true);
        } else {
            if(chkPortEnArgServeurUDP.isSelected()) {
                txtPortServeurUDP.setEnabled(false);
            } else {
                txtPortServeurUDP.setEnabled(true);
            }
            
            chkPortEnArgServeurUDP.setEnabled(false);
        }
    }//GEN-LAST:event_chkSpecifierPortServeurUDPActionPerformed
    
    private void chkPortEnArgServeurUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPortEnArgServeurUDPActionPerformed
        // TODO add your handling code here:
        if(chkSpecifierPortServeurUDP.isSelected()) {
            if(chkPortEnArgServeurUDP.isSelected()) {
                txtPortServeurUDP.setEnabled(false);
            } else {
                txtPortServeurUDP.setEnabled(true);
            }
        }
    }//GEN-LAST:event_chkPortEnArgServeurUDPActionPerformed
    
    private void chkIpEtPortEnArgClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIpEtPortEnArgClientUDPActionPerformed
        // TODO add your handling code here:
        if(chkIpEtPortEnArgClientUDP.isSelected()) {
            txtIpClientUDP.setEnabled(false);
            txtPortClientUDP.setEnabled(false);
        } else {
            txtIpClientUDP.setEnabled(true);
            txtPortClientUDP.setEnabled(true);
        }
    }//GEN-LAST:event_chkIpEtPortEnArgClientUDPActionPerformed
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        String s = "";
        
        if(model.isClientTCP()) {
            
            
        }
        
        if(model.isClientUDP()) {
            //[possedeMain]
            if(chkPossedeMainClientUDP.isSelected()) {
                s+=1;
            }else {
                s+=0;
            }
            
            if(chkIpEtPortEnArgClientUDP.isSelected()) {
                s+=1;
                
            } else {
                s+=0;
                
            }
            
            if(chkPaquetVideClientUDP.isSelected()) {
                s+=0;
            }
            
            if(chkPaquetNonVideClientUDP.isSelected()) {
                s+=1;
                
                if(radioInfoEnArgClientUDP.isSelected()) {
                    s+=0;
                }
                
                if(radioInfoClavierClientUDP.isSelected()) {
                    s+=1;
                    
                    if(radioInfoSeulClientUDP.isSelected()) {
                        s+=0;
                    }
                    
                    if(radioBoucleClientUDP.isSelected()) {
                        s+=1;
                    }
                    
                }
                    
            }
            
            
            if(chkAfficherReponseClientUDP.isSelected()) {
                s+=1;
            }     else {
                s+=0;
            }
            
            
            
            
            
        }
        
        if(model.isServerTCP()) {
            
        }
        
        if(model.isServerUDP()) {
            //[possedeMain]
            if(chkPossedeMainServeurUDP.isSelected()) {
                s+=1;
            }else {
                s+=0;
            }
            
            if(chkSpecifierPortServeurUDP.isSelected()) {
                s+=1;
                if(chkPortEnArgServeurUDP.isSelected()) {
                    s+=1;
                } else {
                    s+=0;
                }
            }else {
                s+=0;
            }
            
            if(chkTourneEnBoucleServeurUDP.isSelected()) {
                s+=1;
                
            } else {
                s+=0;
            }
            
            
            
            
        }
        
        txtCode.setText(s);
        
    }//GEN-LAST:event_jButton6ActionPerformed
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String s = txtCode.getText();
        int i = 0;
        try{
            if(!s.isEmpty()) {
                if(model.isClientTCP()) {
                    
                    
                }
                
                if(model.isClientUDP()) {
                    if(s.charAt(i) == '0') {
                        if(chkPossedeMainClientUDP.isSelected()) {
                            chkPossedeMainClientUDP.doClick();
                        }
                        
                        
                    }else {
                        if(!chkPossedeMainClientUDP.isSelected()) {
                            chkPossedeMainClientUDP.doClick();
                        }
                        
                    }
                    i++;
                    
                    if(s.charAt(i) == '0') {
                        if(chkIpEtPortEnArgClientUDP.isSelected()) {
                            chkIpEtPortEnArgClientUDP.doClick();
                        }
                    } else {
                        if(!chkIpEtPortEnArgClientUDP.isSelected()) {
                            chkIpEtPortEnArgClientUDP.doClick();
                        }
                    }
                    
                    i++;
                    /*if(chkPaquetNonVideClientUDP.isSelected()) {
                s+=1;
                
                if(radioInfoEnArgClientUDP.isSelected()) {
                    s+=0;
                }
                
                if(radioInfoClavierClientUDP.isSelected()) {
                    s+=1;
                    
                    if(radioInfoSeulClientUDP.isSelected()) {
                        s+=0;
                    }
                    
                    if(radioBoucleClientUDP.isSelected()) {
                        s+=1;
                    }
                    
                }
                    
            }*/
                    
                    
                    if(s.charAt(i) == '0') {
                        if(!chkPaquetVideClientUDP.isSelected()) {
                            chkPaquetVideClientUDP.doClick();
                        }
                        
                        i++;
                    } else {
                        if(!chkPaquetNonVideClientUDP.isSelected()) {
                            chkPaquetNonVideClientUDP.doClick();
                           
                        }
                        i++;
                        
                        if(s.charAt(i) == '0') {
                            if(!radioInfoEnArgClientUDP.isSelected()) {
                                radioInfoEnArgClientUDP.doClick();
                            }
                            i++;
                        } else {
                            if(!radioInfoClavierClientUDP.isSelected()) {
                                radioInfoClavierClientUDP.doClick();
                            }
                            i++;
                            
                            if(s.charAt(i) == '0') {
                                if(!radioInfoSeulClientUDP.isSelected()) {
                                    radioInfoSeulClientUDP.doClick();
                                }
                                i++;
                            } else {
                                if(!radioBoucleClientUDP.isSelected()) {
                                    radioBoucleClientUDP.doClick();
                                }
                                
                                i++;
                            }
                        }
                    }
                    
                    if(s.charAt(i) == '0') {
                        if(chkAfficherReponseClientUDP.isSelected()) {
                            chkAfficherReponseClientUDP.doClick();
                        }
                    } else {
                        if(!chkAfficherReponseClientUDP.isSelected()) {
                            chkAfficherReponseClientUDP.doClick();
                        }
                    }
                }
                
                
                
                if(model.isServerTCP()) {
                    
                }
                
                
                if(model.isServerUDP()) {
                    //[possedeMain]
                    
                    
                    if(s.charAt(i) == '0') {
                        if(chkPossedeMainServeurUDP.isSelected()) {
                            chkPossedeMainServeurUDP.doClick();
                        }
                        
                        
                    }else {
                        if(!chkPossedeMainServeurUDP.isSelected()) {
                            chkPossedeMainServeurUDP.doClick();
                        }
                        
                    }
                    i++;
                    
                    if(s.charAt(i) == '1') {
                        //ici
                        if(!chkSpecifierPortServeurUDP.isSelected()) {
                            chkSpecifierPortServeurUDP.doClick();
                        }
                        
                        i++;
                        if(s.charAt(i) == '0') {
                            if(chkPortEnArgServeurUDP.isSelected()) {
                                chkPortEnArgServeurUDP.doClick();
                            }
                        } else {
                            if(!chkPortEnArgServeurUDP.isSelected()) {
                                chkPortEnArgServeurUDP.doClick();
                            }
                        }
                        
                        i++;
                    }else {
                        if(chkSpecifierPortServeurUDP.isSelected())
                            chkSpecifierPortServeurUDP.doClick();
                        i++;
                    }
                    
                    if(s.charAt(i) == '1') {
                        if(!chkTourneEnBoucleServeurUDP.isSelected()) {
                            chkTourneEnBoucleServeurUDP.doClick();
                        }
                        
                    } else {
                        
                        if(chkTourneEnBoucleServeurUDP.isSelected()) {
                            chkTourneEnBoucleServeurUDP.doClick();
                        }
                    }
                    
                    
                    
                    
                    
                }
            }else {
                JDialog erreur = new JDialog(this, "Erreur dans le code de remplissage");
                erreur.add(new JLabel("Le code de remplissage ne doit pas être vide !"));
                erreur.pack();
                erreur.setModal(true);
                erreur.setLocationRelativeTo(null);
                erreur.setVisible(true);
            }
        } catch(StringIndexOutOfBoundsException e ) {
            JDialog erreur = new JDialog(this, "Erreur dans le code de remplissage");
            erreur.add(new JLabel("Le code est incorrect !"));
            erreur.pack();
            erreur.setModal(true);
            erreur.setLocationRelativeTo(null);
            erreur.setVisible(true);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if(!panelCode.isVisible()) {
            panelCode.setVisible(true);
        } else {
            panelCode.setVisible(false);
        }
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        panelCode.setVisible(false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void btnCopierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopierActionPerformed
        // TODO add your handling code here:
        if(!editeurCode.getText().equals("")) {
            StringSelection selection = new StringSelection(editeurCode.getText());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, null);
        }
    }//GEN-LAST:event_btnCopierActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        editeurCode.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void chkPaquetNonVideClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPaquetNonVideClientUDPActionPerformed
        // TODO add your handling code here:
        if(chkPaquetNonVideClientUDP.isSelected()) {
            radioInfoEnArgClientUDP.setEnabled(true);
            radioInfoClavierClientUDP.setEnabled(true);
            if(radioInfoClavierClientUDP.isSelected()) {
                radioInfoSeulClientUDP.setEnabled(true);
                radioBoucleClientUDP.setEnabled(true);
                if(radioBoucleClientUDP.isSelected()) {
                    txtMotsFinBoucleClientUDP.setEnabled(true);
                }
            }
        } 
    }//GEN-LAST:event_chkPaquetNonVideClientUDPActionPerformed

    private void radioBoucleClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBoucleClientUDPActionPerformed
        // TODO add your handling code here:
        if(radioBoucleClientUDP.isSelected()) {
            txtMotsFinBoucleClientUDP.setEnabled(true);
        }
    }//GEN-LAST:event_radioBoucleClientUDPActionPerformed

    private void radioInfoClavierClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioInfoClavierClientUDPActionPerformed
        // TODO add your handling code here:
        
        if(radioInfoClavierClientUDP.isSelected()) {
            radioInfoSeulClientUDP.setEnabled(true);
            radioBoucleClientUDP.setEnabled(true);
            if(radioBoucleClientUDP.isSelected()) {
                txtMotsFinBoucleClientUDP.setEnabled(true);
            }
            
        }
    }//GEN-LAST:event_radioInfoClavierClientUDPActionPerformed

    private void radioInfoSeulClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioInfoSeulClientUDPActionPerformed
        // TODO add your handling code here:
        
            
            txtMotsFinBoucleClientUDP.setEnabled(false);
       
    }//GEN-LAST:event_radioInfoSeulClientUDPActionPerformed

    private void radioInfoEnArgClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioInfoEnArgClientUDPActionPerformed
        // TODO add your handling code here:
        radioInfoSeulClientUDP.setEnabled(false);
        radioBoucleClientUDP.setEnabled(false);
        txtMotsFinBoucleClientUDP.setEnabled(false);
    }//GEN-LAST:event_radioInfoEnArgClientUDPActionPerformed

    private void chkPaquetVideClientUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPaquetVideClientUDPActionPerformed
        // TODO add your handling code here:
        radioInfoEnArgClientUDP.setEnabled(false);
        radioInfoClavierClientUDP.setEnabled(false);
        radioInfoSeulClientUDP.setEnabled(false);
        radioBoucleClientUDP.setEnabled(false);
        txtMotsFinBoucleClientUDP.setEnabled(false);
    }//GEN-LAST:event_chkPaquetVideClientUDPActionPerformed

    private void chkSysoutServeurUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSysoutServeurUDPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSysoutServeurUDPActionPerformed
    
    private void tabsChanged() {
        if(tabsTCPUDP.getSelectedIndex() == 0) {
            if(tabsClientServeurTCP.getSelectedIndex() == 0) {
                model.setMode(0, 0);
            } else {
                model.setMode(0, 1);
            }
        } else {
            if(tabsClientServeurUDP.getSelectedIndex() == 0) {
                model.setMode(1, 0);
            } else {
                model.setMode(1, 1);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenetrePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetrePrincipal(new Model()).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopier;
    private javax.swing.JCheckBox chkAfficherReponseClientUDP;
    private javax.swing.JCheckBox chkIpEtPortEnArgClientUDP;
    private javax.swing.JCheckBox chkPaquetNonVideClientUDP;
    private javax.swing.JCheckBox chkPaquetVideClientUDP;
    private javax.swing.JCheckBox chkPortEnArgServeurUDP;
    private javax.swing.JCheckBox chkPossedeMainClientUDP;
    private javax.swing.JCheckBox chkPossedeMainServeurUDP;
    private javax.swing.JCheckBox chkSpecifierPortServeurUDP;
    private javax.swing.JCheckBox chkSysoutClientUDP;
    private javax.swing.JCheckBox chkSysoutServeurUDP;
    private javax.swing.JCheckBox chkTourneEnBoucleServeurUDP;
    private javax.swing.JCheckBox chkVerifClientUDP;
    private javax.swing.JCheckBox chkVerifServeurUDP;
    private javax.swing.JEditorPane editeurCode;
    private javax.swing.JFileChooser enregistreurFichier;
    private javax.swing.ButtonGroup groupeNbInfoClientUDP;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JPanel panelCode;
    private javax.swing.JRadioButton radioBoucleClientUDP;
    private javax.swing.JRadioButton radioInfoClavierClientUDP;
    private javax.swing.JRadioButton radioInfoEnArgClientUDP;
    private javax.swing.JRadioButton radioInfoSeulClientUDP;
    private javax.swing.JTabbedPane tabsClientServeurTCP;
    private javax.swing.JTabbedPane tabsClientServeurUDP;
    private javax.swing.JTabbedPane tabsTCPUDP;
    private javax.swing.ButtonGroup tcpGroupeInfoClavierBoucleOuPas;
    private javax.swing.ButtonGroup tcpGroupeTypeInfoArgOuClavier;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtIpClientUDP;
    private javax.swing.JTextField txtMotsFinBoucleClientUDP;
    private javax.swing.JTextField txtNomClientUDP;
    private javax.swing.JTextField txtNomServeurUDP;
    private javax.swing.JTextField txtPortClientUDP;
    private javax.swing.JTextField txtPortServeurUDP;
    private javax.swing.JTextField txtTailleBuferClientUDP;
    private javax.swing.JTextField txtTailleBufferServeurUDP;
    private javax.swing.ButtonGroup udpGroupeInfoClavierBoucleOuPas;
    private javax.swing.ButtonGroup udpGroupeTypeInfo;
    private javax.swing.ButtonGroup udpGroupeTypeInfoArgOuClavier;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void update(Observable o, Object arg) {
        if(model.isClientTCP()) {
            editeurCode.setText("Client TCP");
        }
        
        if(model.isClientUDP()) {
            editeurCode.setText(model.getClientUDP().toString());
        }
        
        if(model.isServerTCP()) {
            editeurCode.setText("Serveur TCP");
        }
        
        if(model.isServerUDP()) {
            editeurCode.setText(model.getServeurUDP().toString());
        }
    }
}
